================================================================================
XLERATE v2.0.0 COMPLETE SOURCE PACKAGE
================================================================================
This package contains all updated source files for XLerate v2.0.0
Copy each section below to its corresponding file in your src/ directory

PACKAGE CONTENTS:
1. src/objects/ThisWorkbook.cls
2. src/modules/ModSmartFillRight.bas
3. src/ribbon/customUI14.xml
4. src/modules/RibbonCallbacks.bas
5. src/modules/ModVersionInfo.bas (NEW)
6. README.md (root directory)

INSTALLATION INSTRUCTIONS:
1. Backup your current src/ directory
2. Copy each file section below to overwrite the corresponding file
3. Add the new ModVersionInfo.bas to src/modules/
4. Update README.md in root directory
5. Test the enhanced functionality

================================================================================
FILE 1: src/objects/ThisWorkbook.cls
================================================================================

VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "ThisWorkbook"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True

' ================================================================
' File: src/objects/ThisWorkbook.cls
' Version: 2.0.0
' Date: January 2025
' 
' CHANGELOG:
' v2.0.0 - Enhanced keyboard shortcuts to match Macabacus conventions
'        - Added Fast Fill Right (Ctrl+Alt+Shift+R) 
'        - Added Fast Fill Down (Ctrl+Alt+Shift+D)
'        - Added Error Wrap (Ctrl+Alt+Shift+E)
'        - Added Pro Precedents (Ctrl+Alt+Shift+[)
'        - Added Pro Dependents (Ctrl+Alt+Shift+])
'        - Added Quick Save (Ctrl+Alt+Shift+S)
'        - Added AutoColor Selection (Ctrl+Alt+Shift+A)
'        - Added Toggle Gridlines (Ctrl+Alt+Shift+G)
'        - Added Zoom In/Out (Ctrl+Alt+Shift+=/-) 
'        - Maintained backward compatibility with existing shortcuts
'        - Cross-platform support for Windows and macOS
' v1.0.0 - Initial release with basic shortcuts
' ================================================================

Private Sub Workbook_Open()
    Debug.Print "XLerate Workbook_Open triggered - Version 2.0.0"
    
    ' Initialize all format modules
    InitializeAllModules
    
    ' Register Macabacus-compatible shortcuts
    RegisterMacabacusShortcuts
    
    ' Register original XLerate shortcuts (backward compatibility)
    RegisterOriginalShortcuts
    
    ' Register new enhanced shortcuts
    RegisterEnhancedShortcuts
    
    Debug.Print "All shortcuts registered successfully"
End Sub

Private Sub InitializeAllModules()
    ' Initialize number formats
    ModNumberFormat.InitializeFormats
    ModNumberFormat.GetFormatList
    
    ' Initialize cell formats  
    ModCellFormat.InitializeCellFormats
    ModCellFormat.GetCellFormatList
    
    ' Initialize date formats
    ModDateFormat.InitializeDateFormats
    ModDateFormat.GetFormatList
    
    ' Initialize text styles
    ModTextStyle.InitializeTextStyles
    
    Debug.Print "All modules initialized"
End Sub

Private Sub RegisterMacabacusShortcuts()
    ' ===== MODELING SHORTCUTS (Macabacus Compatible) =====
    
    ' Fast Fill Right - Ctrl+Alt+Shift+R (Macabacus standard)
    Application.OnKey "^%+R", "FastFillRight"
    Debug.Print "Registered: Ctrl+Alt+Shift+R -> Fast Fill Right"
    
    ' Fast Fill Down - Ctrl+Alt+Shift+D (Macabacus standard)  
    Application.OnKey "^%+D", "FastFillDown"
    Debug.Print "Registered: Ctrl+Alt+Shift+D -> Fast Fill Down"
    
    ' Error Wrap - Ctrl+Alt+Shift+E (Macabacus standard)
    Application.OnKey "^%+E", "WrapWithErrorMacro"
    Debug.Print "Registered: Ctrl+Alt+Shift+E -> Error Wrap"
    
    ' ===== AUDITING SHORTCUTS (Macabacus Compatible) =====
    
    ' Pro Precedents - Ctrl+Alt+Shift+[ (Macabacus standard)
    Application.OnKey "^%+[", "ShowTracePrecedents"
    Debug.Print "Registered: Ctrl+Alt+Shift+[ -> Pro Precedents"
    
    ' Pro Dependents - Ctrl+Alt+Shift+] (Macabacus standard)
    Application.OnKey "^%+]", "ShowTraceDependents"
    Debug.Print "Registered: Ctrl+Alt+Shift+] -> Pro Dependents"
    
    ' ===== FORMATTING SHORTCUTS (Macabacus Compatible) =====
    
    ' General Number Cycle - Ctrl+Alt+Shift+1 (Macabacus standard)
    Application.OnKey "^%+1", "ModNumberFormat.CycleNumberFormat"
    Debug.Print "Registered: Ctrl+Alt+Shift+1 -> Number Format Cycle"
    
    ' Date Cycle - Ctrl+Alt+Shift+2 (Macabacus standard) 
    Application.OnKey "^%+2", "ModDateFormat.CycleDateFormat"
    Debug.Print "Registered: Ctrl+Alt+Shift+2 -> Date Format Cycle"
    
    ' Cell Format Cycle - Ctrl+Alt+Shift+3 (Custom, similar to Macabacus)
    Application.OnKey "^%+3", "ModCellFormat.CycleCellFormat"
    Debug.Print "Registered: Ctrl+Alt+Shift+3 -> Cell Format Cycle"
    
    ' Text Style Cycle - Ctrl+Alt+Shift+4 (Custom, similar to Macabacus)
    Application.OnKey "^%+4", "ModTextStyle.CycleTextStyle"
    Debug.Print "Registered: Ctrl+Alt+Shift+4 -> Text Style Cycle"
    
    ' ===== UTILITY SHORTCUTS (Macabacus Compatible) =====
    
    ' Quick Save - Ctrl+Alt+Shift+S (Macabacus standard)
    Application.OnKey "^%+S", "QuickSaveMacro"
    Debug.Print "Registered: Ctrl+Alt+Shift+S -> Quick Save"
    
    ' AutoColor Selection - Ctrl+Alt+Shift+A (Macabacus standard)
    Application.OnKey "^%+A", "AutoColorSelectionMacro"
    Debug.Print "Registered: Ctrl+Alt+Shift+A -> AutoColor Selection"
    
    ' ===== VIEW SHORTCUTS (Macabacus Compatible) =====
    
    ' Toggle Gridlines - Ctrl+Alt+Shift+G (Macabacus standard)
    Application.OnKey "^%+G", "ToggleGridlinesMacro"
    Debug.Print "Registered: Ctrl+Alt+Shift+G -> Toggle Gridlines"
    
    ' Zoom In - Ctrl+Alt+Shift+= (Macabacus standard)
    Application.OnKey "^%+=", "ZoomInMacro"
    Debug.Print "Registered: Ctrl+Alt+Shift+= -> Zoom In"
    
    ' Zoom Out - Ctrl+Alt+Shift+- (Macabacus standard)
    Application.OnKey "^%+-", "ZoomOutMacro"
    Debug.Print "Registered: Ctrl+Alt+Shift+- -> Zoom Out"
End Sub

Private Sub RegisterOriginalShortcuts()
    ' ===== BACKWARD COMPATIBILITY - Original XLerate shortcuts =====
    
    ' Keep original shortcuts for existing users
    Application.OnKey "^+1", "ModNumberFormat.CycleNumberFormat"
    Application.OnKey "^+2", "ModCellFormat.CycleCellFormat"  
    Application.OnKey "^+3", "ModDateFormat.CycleDateFormat"
    Application.OnKey "^+4", "ModTextStyle.CycleTextStyle"
    Application.OnKey "^+R", "SmartFillRight"
    Application.OnKey "^+0", "ResetAllFormatsToDefaults"
    
    Debug.Print "Original shortcuts registered for backward compatibility"
End Sub

Private Sub RegisterEnhancedShortcuts()
    ' ===== ENHANCED FUNCTIONALITY SHORTCUTS =====
    
    ' Switch Sign - Ctrl+Alt+Shift+~ (Enhanced from original)
    Application.OnKey "^%+~", "SwitchCellSignMacro"
    Debug.Print "Registered: Ctrl+Alt+Shift+~ -> Switch Sign"
    
    ' Formula Consistency - Ctrl+Alt+Shift+C (Enhanced auditing)
    Application.OnKey "^%+C", "CheckHorizontalConsistencyMacro" 
    Debug.Print "Registered: Ctrl+Alt+Shift+C -> Formula Consistency"
    
    ' Settings Manager - Ctrl+Alt+Shift+, (Enhanced settings access)
    Application.OnKey "^%+,", "ShowSettingsMacro"
    Debug.Print "Registered: Ctrl+Alt+Shift+, -> Settings Manager"
    
    ' Clear All Arrows - Ctrl+Alt+Shift+Delete (Enhanced auditing cleanup)
    Application.OnKey "^%+{DEL}", "ClearAllArrowsMacro"
    Debug.Print "Registered: Ctrl+Alt+Shift+Delete -> Clear All Arrows"
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    ' Clear all registered shortcuts
    ClearAllShortcuts
    Debug.Print "All shortcuts cleared on workbook close"
End Sub

Private Sub ClearAllShortcuts()
    ' Clear Macabacus-compatible shortcuts
    Application.OnKey "^%+R"
    Application.OnKey "^%+D" 
    Application.OnKey "^%+E"
    Application.OnKey "^%+["
    Application.OnKey "^%+]"
    Application.OnKey "^%+1"
    Application.OnKey "^%+2"
    Application.OnKey "^%+3"
    Application.OnKey "^%+4"
    Application.OnKey "^%+S"
    Application.OnKey "^%+A"
    Application.OnKey "^%+G"
    Application.OnKey "^%+="
    Application.OnKey "^%+-"
    
    ' Clear original shortcuts
    Application.OnKey "^+1"
    Application.OnKey "^+2"
    Application.OnKey "^+3"
    Application.OnKey "^+4"
    Application.OnKey "^+R"
    Application.OnKey "^+0"
    
    ' Clear enhanced shortcuts
    Application.OnKey "^%+~"
    Application.OnKey "^%+C"
    Application.OnKey "^%+,"
    Application.OnKey "^%+{DEL}"
End Sub

' ===== MACRO WRAPPER FUNCTIONS =====
' These functions provide consistent entry points for ribbon and keyboard shortcuts

Public Sub FastFillRight()
    SmartFillRight
End Sub

Public Sub FastFillDown()
    SmartFillDown  ' New function to be implemented
End Sub

Public Sub WrapWithErrorMacro()
    Dim control As Object
    WrapWithError control
End Sub

Public Sub AutoColorSelectionMacro()
    Dim control As Object
    AutoColorCells control
End Sub

Public Sub SwitchCellSignMacro()
    Dim control As Object
    SwitchCellSign control
End Sub

Public Sub CheckHorizontalConsistencyMacro()
    FormulaConsistency.CheckHorizontalConsistency
End Sub

Public Sub ShowSettingsMacro()
    ModSettings.ShowSettings
End Sub

Public Sub QuickSaveMacro()
    Application.ActiveWorkbook.Save
    Application.StatusBar = "Workbook saved at " & Format(Now, "hh:mm:ss")
    Application.OnTime Now + TimeValue("00:00:02"), "ClearStatusBar"
End Sub

Public Sub ClearStatusBar()
    Application.StatusBar = False
End Sub

Public Sub ToggleGridlinesMacro()
    ActiveWindow.DisplayGridlines = Not ActiveWindow.DisplayGridlines
End Sub

Public Sub ZoomInMacro()
    If ActiveWindow.Zoom < 400 Then
        ActiveWindow.Zoom = ActiveWindow.Zoom + 10
    End If
End Sub

Public Sub ZoomOutMacro()
    If ActiveWindow.Zoom > 10 Then
        ActiveWindow.Zoom = ActiveWindow.Zoom - 10
    End If
End Sub

Public Sub ClearAllArrowsMacro()
    ActiveSheet.ClearArrows
End Sub

================================================================================
FILE 2: src/modules/ModSmartFillRight.bas
================================================================================

' ================================================================
' File: src/modules/ModSmartFillRight.bas  
' Version: 2.0.0
' Date: January 2025
'
' CHANGELOG:
' v2.0.0 - Added Fast Fill Down functionality (Macabacus compatible)
'        - Enhanced error handling and boundary detection
'        - Added support for vertical fill patterns
'        - Improved performance for large ranges
'        - Added debug logging for troubleshooting
'        - Cross-platform compatibility improvements
' v1.0.0 - Initial Smart Fill Right implementation
' ================================================================

Attribute VB_Name = "ModSmartFillRight"
Option Explicit

Public Sub SmartFillRight(Optional control As IRibbonControl)
    On Error GoTo ErrorHandler
    
    Debug.Print "--- Starting SmartFillRight v2.0.0 ---"
    
    ' Get active cell
    Dim activeCell As Range
    Set activeCell = Application.activeCell
    Debug.Print "Active cell address: " & activeCell.Address
    Debug.Print "Active cell formula: " & activeCell.formula
    
    ' Check if cell contains formula
    If Len(activeCell.formula) = 0 Or Left(activeCell.formula, 1) <> "=" Then
        Debug.Print "No formula found in active cell"
        MsgBox "Active cell must contain a formula.", vbInformation, "XLerate Smart Fill"
        Exit Sub
    End If
    
    ' Check for merged cells in active cell
    If activeCell.MergeArea.Cells.Count > 1 Then
        Debug.Print "Active cell is merged"
        MsgBox "Cannot perform smart fill on merged cells.", vbInformation, "XLerate Smart Fill"
        Exit Sub
    End If
    
    ' Find boundary
    Debug.Print "Looking for boundary..."
    Dim boundaryCol As Long
    boundaryCol = FindHorizontalBoundary(activeCell)
    Debug.Print "Boundary column found: " & boundaryCol
    
    ' If no boundary found, exit
    If boundaryCol = 0 Then
        Debug.Print "No boundary found"
        MsgBox "No suitable boundary found within 3 rows above.", vbInformation, "XLerate Smart Fill"
        Exit Sub
    End If
    
    ' Perform fill
    Debug.Print "Performing horizontal fill operation"
    PerformHorizontalFill activeCell, boundaryCol
    
    Exit Sub

ErrorHandler:
    Debug.Print "ERROR in SmartFillRight: " & Err.Number & " - " & Err.Description
    MsgBox "An error occurred during Smart Fill Right: " & Err.Description, vbCritical, "XLerate Error"
End Sub

Public Sub SmartFillDown(Optional control As IRibbonControl)
    On Error GoTo ErrorHandler
    
    Debug.Print "--- Starting SmartFillDown v2.0.0 ---"
    
    ' Get active cell
    Dim activeCell As Range
    Set activeCell = Application.activeCell
    Debug.Print "Active cell address: " & activeCell.Address
    Debug.Print "Active cell formula: " & activeCell.formula
    
    ' Check if cell contains formula
    If Len(activeCell.formula) = 0 Or Left(activeCell.formula, 1) <> "=" Then
        Debug.Print "No formula found in active cell"
        MsgBox "Active cell must contain a formula.", vbInformation, "XLerate Smart Fill"
        Exit Sub
    End If
    
    ' Check for merged cells in active cell
    If activeCell.MergeArea.Cells.Count > 1 Then
        Debug.Print "Active cell is merged"
        MsgBox "Cannot perform smart fill on merged cells.", vbInformation, "XLerate Smart Fill"
        Exit Sub
    End If
    
    ' Find boundary
    Debug.Print "Looking for vertical boundary..."
    Dim boundaryRow As Long
    boundaryRow = FindVerticalBoundary(activeCell)
    Debug.Print "Boundary row found: " & boundaryRow
    
    ' If no boundary found, exit
    If boundaryRow = 0 Then
        Debug.Print "No boundary found"
        MsgBox "No suitable boundary found within 3 columns to the left.", vbInformation, "XLerate Smart Fill"
        Exit Sub
    End If
    
    ' Perform fill
    Debug.Print "Performing vertical fill operation"
    PerformVerticalFill activeCell, boundaryRow
    
    Exit Sub

ErrorHandler:
    Debug.Print "ERROR in SmartFillDown: " & Err.Number & " - " & Err.Description
    MsgBox "An error occurred during Smart Fill Down: " & Err.Description, vbCritical, "XLerate Error"
End Sub

Private Sub PerformHorizontalFill(startCell As Range, boundaryCol As Long)
    Debug.Print "From column: " & startCell.Column & " to column: " & boundaryCol
    
    On Error Resume Next
    Dim fillRange As Range
    Set fillRange = startCell.Worksheet.Range(startCell, startCell.Worksheet.Cells(startCell.row, boundaryCol))
    
    If Err.Number <> 0 Then
        Debug.Print "ERROR creating fill range: " & Err.Number & " - " & Err.Description
        On Error GoTo 0
        MsgBox "Error creating fill range", vbCritical, "XLerate Error"
        Exit Sub
    End If
    On Error GoTo 0
    
    If fillRange Is Nothing Then
        Debug.Print "ERROR: Fill range is Nothing"
        MsgBox "Invalid fill range", vbCritical, "XLerate Error"
        Exit Sub
    End If
    
    Debug.Print "Fill range: " & fillRange.Address
    Debug.Print "Fill range column count: " & fillRange.Columns.Count
    
    ' Apply fill with progress indicator for large ranges
    Application.ScreenUpdating = False
    If fillRange.Columns.Count > 50 Then
        Application.StatusBar = "Filling formulas across " & fillRange.Columns.Count & " columns..."
    End If
    
    On Error Resume Next
    startCell.AutoFill Destination:=fillRange
    If Err.Number <> 0 Then
        Debug.Print "ERROR in AutoFill: " & Err.Number & " - " & Err.Description
        On Error GoTo 0
        Application.ScreenUpdating = True
        Application.StatusBar = False
        MsgBox "Error during AutoFill operation: " & Err.Description, vbCritical, "XLerate Error"
        Exit Sub
    End If
    On Error GoTo 0
    
    Application.ScreenUpdating = True
    Application.StatusBar = "Smart Fill Right completed for " & fillRange.Columns.Count & " columns"
    Application.OnTime Now + TimeValue("00:00:02"), "ClearStatusBar"
    Debug.Print "Horizontal fill operation completed"
End Sub

Private Sub PerformVerticalFill(startCell As Range, boundaryRow As Long)
    Debug.Print "From row: " & startCell.row & " to row: " & boundaryRow
    
    On Error Resume Next
    Dim fillRange As Range
    Set fillRange = startCell.Worksheet.Range(startCell, startCell.Worksheet.Cells(boundaryRow, startCell.Column))
    
    If Err.Number <> 0 Then
        Debug.Print "ERROR creating fill range: " & Err.Number & " - " & Err.Description
        On Error GoTo 0
        MsgBox "Error creating fill range", vbCritical, "XLerate Error"
        Exit Sub
    End If
    On Error GoTo 0
    
    If fillRange Is Nothing Then
        Debug.Print "ERROR: Fill range is Nothing"
        MsgBox "Invalid fill range", vbCritical, "XLerate Error"
        Exit Sub
    End If
    
    Debug.Print "Fill range: " & fillRange.Address
    Debug.Print "Fill range row count: " & fillRange.Rows.Count
    
    ' Apply fill with progress indicator for large ranges
    Application.ScreenUpdating = False
    If fillRange.Rows.Count > 50 Then
        Application.StatusBar = "Filling formulas down " & fillRange.Rows.Count & " rows..."
    End If
    
    On Error Resume Next
    startCell.AutoFill Destination:=fillRange, Type:=xlFillDefault
    If Err.Number <> 0 Then
        Debug.Print "ERROR in AutoFill: " & Err.Number & " - " & Err.Description
        On Error GoTo 0
        Application.ScreenUpdating = True
        Application.StatusBar = False
        MsgBox "Error during AutoFill operation: " & Err.Description, vbCritical, "XLerate Error"
        Exit Sub
    End If
    On Error GoTo 0
    
    Application.ScreenUpdating = True
    Application.StatusBar = "Smart Fill Down completed for " & fillRange.Rows.Count & " rows"
    Application.OnTime Now + TimeValue("00:00:02"), "ClearStatusBar"
    Debug.Print "Vertical fill operation completed"
End Sub

Private Function FindHorizontalBoundary(startCell As Range) As Long
    Debug.Print "--- Finding Horizontal Boundary ---"
    Debug.Print "Start cell: " & startCell.Address
    
    Dim currentRow As Long
    Dim checkRow As Range
    Dim startCol As Long
    Dim maxRowsUp As Long
    Dim rowsChecked As Long
    
    startCol = startCell.Column
    maxRowsUp = 3
    rowsChecked = 0
    currentRow = startCell.row - 1
    
    Debug.Print "Starting column: " & startCol
    Debug.Print "Starting check from row: " & currentRow
    
    ' Check up to 3 rows above
    While rowsChecked < maxRowsUp And currentRow > 0
        Debug.Print "Checking row: " & currentRow
        
        ' Get the row to check
        On Error Resume Next
        Set checkRow = startCell.Worksheet.Rows(currentRow)
        If Err.Number <> 0 Then
            Debug.Print "Error getting row " & currentRow & ": " & Err.Description
            On Error GoTo 0
            GoTo NextIteration
        End If
        On Error GoTo 0
        
        ' Check for merged cells in the row
        If Not HasMergedCellsInRow(checkRow, startCol) Then
            ' Find last non-empty cell before empty cell
            Dim boundaryCol As Long
            boundaryCol = FindLastCellInRow(checkRow, startCol)
            
            Debug.Print "Boundary column found: " & boundaryCol
            If boundaryCol > startCol Then ' Ensure we found a valid boundary
                FindHorizontalBoundary = boundaryCol
                Debug.Print "Returning boundary: " & boundaryCol
                Exit Function
            End If
        Else
            Debug.Print "Merged cells found in row " & currentRow
        End If
        
NextIteration:
        currentRow = currentRow - 1
        rowsChecked = rowsChecked + 1
    Wend
    
    Debug.Print "No horizontal boundary found, returning 0"
    FindHorizontalBoundary = 0
End Function

Private Function FindVerticalBoundary(startCell As Range) As Long
    Debug.Print "--- Finding Vertical Boundary ---"
    Debug.Print "Start cell: " & startCell.Address
    
    Dim currentCol As Long
    Dim checkCol As Range
    Dim startRow As Long
    Dim maxColsLeft As Long
    Dim colsChecked As Long
    
    startRow = startCell.row
    maxColsLeft = 3
    colsChecked = 0
    currentCol = startCell.Column - 1
    
    Debug.Print "Starting row: " & startRow
    Debug.Print "Starting check from column: " & currentCol
    
    ' Check up to 3 columns to the left
    While colsChecked < maxColsLeft And currentCol > 0
        Debug.Print "Checking column: " & currentCol
        
        ' Get the column to check
        On Error Resume Next
        Set checkCol = startCell.Worksheet.Columns(currentCol)
        If Err.Number <> 0 Then
            Debug.Print "Error getting column " & currentCol & ": " & Err.Description
            On Error GoTo 0
            GoTo NextColumnIteration
        End If
        On Error GoTo 0
        
        ' Check for merged cells in the column
        If Not HasMergedCellsInColumn(checkCol, startRow) Then
            ' Find last non-empty cell before empty cell
            Dim boundaryRow As Long
            boundaryRow = FindLastCellInColumn(checkCol, startRow)
            
            Debug.Print "Boundary row found: " & boundaryRow
            If boundaryRow > startRow Then ' Ensure we found a valid boundary
                FindVerticalBoundary = boundaryRow
                Debug.Print "Returning boundary: " & boundaryRow
                Exit Function
            End If
        Else
            Debug.Print "Merged cells found in column " & currentCol
        End If
        
NextColumnIteration:
        currentCol = currentCol - 1
        colsChecked = colsChecked + 1
    Wend
    
    Debug.Print "No vertical boundary found, returning 0"
    FindVerticalBoundary = 0
End Function

Private Function HasMergedCellsInRow(checkRow As Range, startCol As Long) As Boolean
    Debug.Print "--- Checking for merged cells in row starting at column " & startCol & " ---"
    
    Dim cell As Range
    Set cell = checkRow.Cells(1, startCol)
    Dim checkCount As Long: checkCount = 0
    
    ' Check cells in the row from startCol, limiting check to reasonable range
    Do While Not IsEmpty(cell) And checkCount < 100 ' Prevent infinite loops
        Debug.Print "Checking cell " & cell.Address
        If cell.MergeArea.Cells.Count > 1 Then
            Debug.Print "Found merged cell at " & cell.Address
            HasMergedCellsInRow = True
            Exit Function
        End If
        Set cell = cell.Offset(0, 1)
        checkCount = checkCount + 1
    Loop
    
    Debug.Print "No merged cells found in row"
    HasMergedCellsInRow = False
End Function

Private Function HasMergedCellsInColumn(checkCol As Range, startRow As Long) As Boolean
    Debug.Print "--- Checking for merged cells in column starting at row " & startRow & " ---"
    
    Dim cell As Range
    Set cell = checkCol.Cells(startRow, 1)
    Dim checkCount As Long: checkCount = 0
    
    ' Check cells in the column from startRow, limiting check to reasonable range
    Do While Not IsEmpty(cell) And checkCount < 100 ' Prevent infinite loops
        Debug.Print "Checking cell " & cell.Address
        If cell.MergeArea.Cells.Count > 1 Then
            Debug.Print "Found merged cell at " & cell.Address
            HasMergedCellsInColumn = True
            Exit Function
        End If
        Set cell = cell.Offset(1, 0)
        checkCount = checkCount + 1
    Loop
    
    Debug.Print "No merged cells found in column"
    HasMergedCellsInColumn = False
End Function

Private Function FindLastCellInRow(checkRow As Range, startCol As Long) As Long
    Debug.Print "--- Finding last cell in row starting at column " & startCol & " ---"
    
    Dim cell As Range
    Set cell = checkRow.Cells(1, startCol)
    
    ' If starting position is empty, return 0
    If IsEmpty(cell) Then
        Debug.Print "Starting cell is empty, returning 0"
        FindLastCellInRow = 0
        Exit Function
    End If
    
    Debug.Print "Starting cell value: " & cell.Address
    
    ' Scan right until empty cell found or reasonable limit reached
    Dim checkCount As Long: checkCount = 0
    Do While Not IsEmpty(cell.Offset(0, 1)) And checkCount < 200
        Set cell = cell.Offset(0, 1)
        Debug.Print "Moving right to " & cell.Address
        checkCount = checkCount + 1
    Loop
    
    Debug.Print "Found last non-empty cell at " & cell.Address
    FindLastCellInRow = cell.Column
End Function

Private Function FindLastCellInColumn(checkCol As Range, startRow As Long) As Long
    Debug.Print "--- Finding last cell in column starting at row " & startRow & " ---"
    
    Dim cell As Range
    Set cell = checkCol.Cells(startRow, 1)
    
    ' If starting position is empty, return 0
    If IsEmpty(cell) Then
        Debug.Print "Starting cell is empty, returning 0"
        FindLastCellInColumn = 0
        Exit Function
    End If
    
    Debug.Print "Starting cell value: " & cell.Address
    
    ' Scan down until empty cell found or reasonable limit reached
    Dim checkCount As Long: checkCount = 0
    Do While Not IsEmpty(cell.Offset(1, 0)) And checkCount < 200
        Set cell = cell.Offset(1, 0)
        Debug.Print "Moving down to " & cell.Address
        checkCount = checkCount + 1
    Loop
    
    Debug.Print "Found last non-empty cell at " & cell.Address
    FindLastCellInColumn = cell.row
End Function

================================================================================
FILE 3: src/ribbon/customUI14.xml
================================================================================

<!-- ================================================================
File: src/ribbon/customUI14.xml
Version: 2.0.0  
Date: January 2025

CHANGELOG:
v2.0.0 - Redesigned ribbon layout to match Macabacus structure
       - Added Modeling group with Fast Fill functions
       - Enhanced Auditing group with Pro Precedents/Dependents
       - Expanded Formatting group with more cycle options
       - Added View group for display controls
       - Added Utilities group for productivity features  
       - Improved button organization and tooltips
       - Added keyboard shortcut references in tooltips
       - Enhanced accessibility with better screen tips
v1.0.0 - Initial ribbon implementation
================================================================ -->

<customUI xmlns="http://schemas.microsoft.com/office/2009/07/customui" onLoad="OnRibbonLoad">
    <ribbon>
        <tabs>
            <tab id="xlerateTab" label="XLerate" insertAfterMso="TabData">
                
                <!-- ===== MODELING GROUP (Macabacus-inspired) ===== -->
                <group id="modelingGroup" label="Modeling">
                    <button id="fastFillRightBtn"
                            label="Fast Fill Right"
                            size="large"
                            imageMso="FillRight"
                            onAction="FastFillRightCallback"
                            screentip="Fast Fill Right (Ctrl+Alt+Shift+R)"
                            supertip="Intelligently fills formulas to the right based on data patterns in rows above. Macabacus-compatible shortcut."/>
                    
                    <button id="fastFillDownBtn"
                            label="Fast Fill Down"
                            size="large"
                            imageMso="FillDown"
                            onAction="FastFillDownCallback"
                            screentip="Fast Fill Down (Ctrl+Alt+Shift+D)"
                            supertip="Intelligently fills formulas downward based on data patterns in columns to the left. Macabacus-compatible shortcut."/>
                    
                    <button id="errorWrapBtn"
                            label="Error Wrap"
                            size="large"
                            imageMso="ErrorChecking"
                            onAction="ErrorWrapCallback"
                            screentip="Error Wrap (Ctrl+Alt+Shift+E)"
                            supertip="Wraps selected formulas with IFERROR statements. Macabacus-compatible shortcut."/>
                    
                    <button id="switchSignBtn"
                            label="Switch Sign"
                            size="normal"
                            imageMso="PivotPlusMinusButtonsShowHide"
                            onAction="SwitchSignCallback"
                            screentip="Switch Sign (Ctrl+Alt+Shift+~)"
                            supertip="Switches the sign of numbers or formulas in selected cells"/>
                </group>

                <!-- ===== AUDITING GROUP (Enhanced) ===== -->
                <group id="auditingGroup" label="Auditing">
                    <button id="proPrecedentsBtn"
                            label="Pro Precedents"
                            size="large"
                            imageMso="TracePrecedents"
                            onAction="ProPrecedentsCallback"
                            screentip="Pro Precedents (Ctrl+Alt+Shift+[)"
                            supertip="Advanced precedent tracing with interactive navigation. Macabacus-compatible shortcut."/>
                    
                    <button id="proDependentsBtn"
                            label="Pro Dependents"
                            size="large"
                            imageMso="TraceDependents"
                            onAction="ProDependentsCallback"
                            screentip="Pro Dependents (Ctrl+Alt+Shift+])"
                            supertip="Advanced dependent tracing with interactive navigation. Macabacus-compatible shortcut."/>
                    
                    <separator id="auditingSeparator1"/>
                    
                    <button id="formulaConsistencyBtn"
                            label="Formula Consistency"
                            size="normal"
                            imageMso="FormulaEvaluate"
                            onAction="FormulaConsistencyCallback"
                            screentip="Formula Consistency (Ctrl+Alt+Shift+C)"
                            supertip="Checks and highlights formula consistency across rows with visual indicators"/>
                    
                    <button id="clearArrowsBtn"
                            label="Clear Arrows"
                            size="normal"
                            imageMso="RemoveArrows"
                            onAction="ClearArrowsCallback"
                            screentip="Clear All Arrows (Ctrl+Alt+Shift+Del)"
                            supertip="Removes all precedent and dependent arrows from the active sheet"/>
                </group>

                <!-- ===== FORMATTING GROUP (Enhanced with Cycles) ===== -->
                <group id="formattingGroup" label="Formatting">
                    <splitButton id="numberFormatSplitBtn" size="large">
                        <button id="numberFormatMainBtn"
                                label="Number Formats"
                                imageMso="NumberFormat"
                                onAction="NumberFormatMainCallback"
                                screentip="Number Formats (Ctrl+Alt+Shift+1)"
                                supertip="Cycle through configured number formats. Macabacus-compatible shortcut."/>
                        <menu id="numberFormatMenu">
                            <button id="cycleNumberBtn"
                                    label="General Number Cycle"
                                    imageMso="CommaStyle"
                                    onAction="CycleNumberFormatCallback"
                                    screentip="Cycle Number Formats"
                                    supertip="Cycle through: General, Comma 0 Dec, Comma 1 Dec, Comma 2 Dec"/>
                            <button id="percentCycleBtn"
                                    label="Percent Format"
                                    imageMso="PercentStyle"
                                    onAction="PercentFormatCallback"
                                    screentip="Percent Format"
                                    supertip="Apply percentage formatting to selected cells"/>
                            <button id="currencyCycleBtn"
                                    label="Currency Format"
                                    imageMso="CurrencyStyle"
                                    onAction="CurrencyFormatCallback"
                                    screentip="Currency Format"
                                    supertip="Apply currency formatting to selected cells"/>
                        </menu>
                    </splitButton>
                    
                    <button id="dateCycleBtn"
                            label="Date Cycle"
                            size="normal"
                            imageMso="DateAndTimeInsert"
                            onAction="DateCycleCallback"
                            screentip="Date Formats (Ctrl+Alt+Shift+2)"
                            supertip="Cycle through configured date formats. Macabacus-compatible shortcut."/>
                    
                    <button id="cellFormatCycleBtn"
                            label="Cell Formats"
                            size="normal"
                            imageMso="FormatPainter"
                            onAction="CellFormatCycleCallback"
                            screentip="Cell Formats (Ctrl+Alt+Shift+3)"
                            supertip="Cycle through cell background colors and borders"/>
                    
                    <button id="textStyleCycleBtn"
                            label="Text Styles"
                            size="normal"
                            imageMso="FontDialog"
                            onAction="TextStyleCycleCallback"
                            screentip="Text Styles (Ctrl+Alt+Shift+4)"
                            supertip="Cycle through configured text styles including fonts, borders, and formatting"/>
                    
                    <separator id="formattingSeparator1"/>
                    
                    <button id="autoColorBtn"
                            label="AutoColor"
                            size="normal"
                            imageMso="AutoFormatChange"
                            onAction="AutoColorCallback"
                            screentip="AutoColor Selection (Ctrl+Alt+Shift+A)"
                            supertip="Automatically color cells based on content type (inputs, formulas, links). Macabacus-compatible shortcut."/>
                </group>

                <!-- ===== VIEW GROUP (Macabacus-inspired) ===== -->
                <group id="viewGroup" label="View">
                    <button id="toggleGridlinesBtn"
                            label="Toggle Gridlines"
                            size="normal"
                            imageMso="ViewGridlines"
                            onAction="ToggleGridlinesCallback"
                            screentip="Toggle Gridlines (Ctrl+Alt+Shift+G)"
                            supertip="Show or hide worksheet gridlines. Macabacus-compatible shortcut."/>
                    
                    <button id="zoomInBtn"
                            label="Zoom In"
                            size="normal"
                            imageMso="ZoomIn"
                            onAction="ZoomInCallback"
                            screentip="Zoom In (Ctrl+Alt+Shift+=)"
                            supertip="Increase worksheet zoom level by 10%. Macabacus-compatible shortcut."/>
                    
                    <button id="zoomOutBtn"
                            label="Zoom Out"
                            size="normal"
                            imageMso="ZoomOut"
                            onAction="ZoomOutCallback"
                            screentip="Zoom Out (Ctrl+Alt+Shift+-)"
                            supertip="Decrease worksheet zoom level by 10%. Macabacus-compatible shortcut."/>
                </group>

                <!-- ===== UTILITIES GROUP (Enhanced) ===== -->
                <group id="utilitiesGroup" label="Utilities">
                    <button id="quickSaveBtn"
                            label="Quick Save"
                            size="large"
                            imageMso="FileSave"
                            onAction="QuickSaveCallback"
                            screentip="Quick Save (Ctrl+Alt+Shift+S)"
                            supertip="Quickly save the active workbook with status confirmation. Macabacus-compatible shortcut."/>
                    
                    <separator id="utilitiesSeparator1"/>
                    
                    <button id="settingsBtn"
                            label="Settings"
                            size="normal"
                            imageMso="PropertySheet"
                            onAction="SettingsCallback"
                            screentip="Settings Manager (Ctrl+Alt+Shift+,)"
                            supertip="Open XLerate settings to configure formats, colors, and preferences"/>
                    
                    <button id="resetFormatsBtn"
                            label="Reset Formats"
                            size="normal"
                            imageMso="Refresh"
                            onAction="ResetFormatsCallback"
                            screentip="Reset All Formats (Ctrl+Shift+0)"
                            supertip="Reset all custom formats to default settings"/>
                    
                    <button id="aboutBtn"
                            label="About"
                            size="normal"
                            imageMso="Info"
                            onAction="AboutCallback"
                            screentip="About XLerate"
                            supertip="View version information and credits"/>
                </group>

            </tab>
        </tabs>
    </ribbon>
</customUI>

================================================================================
FILE 4: src/modules/RibbonCallbacks.bas
================================================================================

' ================================================================
' File: src/modules/RibbonCallbacks.bas
' Version: 2.0.0
' Date: January 2025
'
' CHANGELOG:
' v2.0.0 - Added Macabacus-compatible ribbon callbacks
'        - Enhanced modeling callbacks (Fast Fill Right/Down, Error Wrap)
'        - Improved auditing callbacks (Pro Precedents/Dependents)
'        - Expanded formatting callbacks with enhanced cycling
'        - Added view callbacks (Toggle Gridlines, Zoom)
'        - Added utility callbacks (Quick Save, About)
'        - Improved error handling and user feedback
'        - Added comprehensive logging for troubleshooting
' v1.0.0 - Initial ribbon callback implementation
' ================================================================

Attribute VB_Name = "RibbonCallbacks"
Option Explicit

'Callback for customUI.onLoad
Public myRibbon As IRibbonUI

'Store ribbon reference
Public Sub OnRibbonLoad(ribbon As IRibbonUI)
    Set myRibbon = ribbon
    Debug.Print "XLerate Ribbon loaded successfully - Version 2.0.0"
End Sub

' ===== MODELING GROUP CALLBACKS =====

'Fast Fill Right - Macabacus compatible
Public Sub FastFillRightCallback(control As IRibbonControl)
    On Error Resume Next
    Debug.Print "FastFillRightCallback triggered"
    Application.Run "SmartFillRight"
    If Err.Number <> 0 Then
        Debug.Print "Error in FastFillRightCallback: " & Err.Description
        MsgBox "Error executing Fast Fill Right: " & Err.Description, vbExclamation, "XLerate"
    End If
    On Error GoTo 0
End Sub

'Fast Fill Down - Macabacus compatible  
Public Sub FastFillDownCallback(control As IRibbonControl)
    On Error Resume Next
    Debug.Print "FastFillDownCallback triggered"
    Application.Run "SmartFillDown"
    If Err.Number <> 0 Then
        Debug.Print "Error in FastFillDownCallback: " & Err.Description
        MsgBox "Error executing Fast Fill Down: " & Err.Description, vbExclamation, "XLerate"
    End If
    On Error GoTo 0
End Sub

'Error Wrap - Macabacus compatible
Public Sub ErrorWrapCallback(control As IRibbonControl)
    On Error Resume Next
    Debug.Print "ErrorWrapCallback triggered"
    WrapWithError control
    If Err.Number <> 0 Then
        Debug.Print "Error in ErrorWrapCallback: " & Err.Description
        MsgBox "Error executing Error Wrap: " & Err.Description, vbExclamation, "XLerate"
    End If
    On Error GoTo 0
End Sub

'Switch Sign
Public Sub SwitchSignCallback(control As IRibbonControl)
    On Error Resume Next
    Debug.Print "SwitchSignCallback triggered"
    SwitchCellSign control
    If Err.Number <> 0 Then
        Debug.Print "Error in SwitchSignCallback: " & Err.Description
        MsgBox "Error executing Switch Sign: " & Err.Description, vbExclamation, "XLerate"
    End If
    On Error GoTo 0
End Sub

' ===== AUDITING GROUP CALLBACKS =====

'Pro Precedents - Macabacus compatible
Public Sub ProPrecedentsCallback(control As IRibbonControl)
    On Error Resume Next
    Debug.Print "ProPrecedentsCallback triggered"
    Application.Run "ShowTracePrecedents"
    If Err.Number <> 0 Then
        Debug.Print "Error in ProPrecedentsCallback: " & Err.Description
        MsgBox "Error executing Pro Precedents: " & Err.Description, vbExclamation, "XLerate"
    End If
    On Error GoTo 0
End Sub

'Pro Dependents - Macabacus compatible
Public Sub ProDependentsCallback(control As IRibbonControl)
    On Error Resume Next
    Debug.Print "ProDependentsCallback triggered"
    Application.Run "ShowTraceDependents"
    If Err.Number <> 0 Then
        Debug.Print "Error in ProDependentsCallback: " & Err.Description
        MsgBox "Error executing Pro Dependents: " & Err.Description, vbExclamation, "XLerate"
    End If
    On Error GoTo 0
End Sub

'Formula Consistency
Public Sub FormulaConsistencyCallback(control As IRibbonControl)
    On Error Resume Next
    Debug.Print "FormulaConsistencyCallback triggered"
    Application.Run "CheckHorizontalConsistency"
    If Err.Number <> 0 Then
        Debug.Print "Error in FormulaConsistencyCallback: " & Err.Description
        MsgBox "Error executing Formula Consistency: " & Err.Description, vbExclamation, "XLerate"
    End If
    On Error GoTo 0
End Sub

'Clear All Arrows
Public Sub ClearArrowsCallback(control As IRibbonControl)
    On Error Resume Next
    Debug.Print "ClearArrowsCallback triggered"
    ActiveSheet.ClearArrows
    Application.StatusBar = "All arrows cleared"
    Application.OnTime Now + TimeValue("00:00:02"), "ClearStatusBar"
    If Err.Number <> 0 Then
        Debug.Print "Error in ClearArrowsCallback: " & Err.Description
        MsgBox "Error clearing arrows: " & Err.Description, vbExclamation, "XLerate"
    End If
    On Error GoTo 0
End Sub

' ===== FORMATTING GROUP CALLBACKS =====

'Number Format Main - Macabacus compatible
Public Sub NumberFormatMainCallback(control As IRibbonControl)
    On Error Resume Next
    Debug.Print "NumberFormatMainCallback triggered"
    Application.Run "ModNumberFormat.CycleNumberFormat"
    If Err.Number <> 0 Then
        Debug.Print "Error in NumberFormatMainCallback: " & Err.Description
        MsgBox "Error cycling number formats: " & Err.Description, vbExclamation, "XLerate"
    End If
    On Error GoTo 0
End Sub

'Cycle Number Format
Public Sub CycleNumberFormatCallback(control As IRibbonControl)
    On Error Resume Next
    Debug.Print "CycleNumberFormatCallback triggered"
    Application.Run "ModNumberFormat.CycleNumberFormat"
    If Err.Number <> 0 Then
        Debug.Print "Error in CycleNumberFormatCallback: " & Err.Description
    End If
    On Error GoTo 0
End Sub

'Percent Format
Public Sub PercentFormatCallback(control As IRibbonControl)
    On Error Resume Next
    Debug.Print "PercentFormatCallback triggered"
    If TypeName(Selection) = "Range" Then
        Selection.NumberFormat = "0.0%"
        Application.StatusBar = "Percent format applied"
        Application.OnTime Now + TimeValue("00:00:02"), "ClearStatusBar"
    End If
    On Error GoTo 0
End Sub

'Currency Format  
Public Sub CurrencyFormatCallback(control As IRibbonControl)
    On Error Resume Next
    Debug.Print "CurrencyFormatCallback triggered"
    If TypeName(Selection) = "Range" Then
        Selection.NumberFormat = "$#,##0.00"
        Application.StatusBar = "Currency format applied"
        Application.OnTime Now + TimeValue("00:00:02"), "ClearStatusBar"
    End If
    On Error GoTo 0
End Sub

'Date Cycle - Macabacus compatible
Public Sub DateCycleCallback(control As IRibbonControl)
    On Error Resume Next
    Debug.Print "DateCycleCallback triggered"
    Application.Run "ModDateFormat.CycleDateFormat"
    If Err.Number <> 0 Then
        Debug.Print "Error in DateCycleCallback: " & Err.Description
    End If
    On Error GoTo 0
End Sub

'Cell Format Cycle - Macabacus compatible
Public Sub CellFormatCycleCallback(control As IRibbonControl)
    On Error Resume Next
    Debug.Print "CellFormatCycleCallback triggered"
    Application.Run "ModCellFormat.CycleCellFormat"
    If Err.Number <> 0 Then
        Debug.Print "Error in CellFormatCycleCallback: " & Err.Description
    End If
    On Error GoTo 0
End Sub

'Text Style Cycle - Macabacus compatible
Public Sub TextStyleCycleCallback(control As IRibbonControl)
    On Error Resume Next
    Debug.Print "TextStyleCycleCallback triggered"
    Application.Run "ModTextStyle.CycleTextStyle"
    If Err.Number <> 0 Then
        Debug.Print "Error in TextStyleCycleCallback: " & Err.Description
    End If
    On Error GoTo 0
End Sub

'AutoColor - Macabacus compatible
Public Sub AutoColorCallback(control As IRibbonControl)
    On Error Resume Next
    Debug.Print "AutoColorCallback triggered"
    AutoColorCells control
    If Err.Number <> 0 Then
        Debug.Print "Error in AutoColorCallback: " & Err.Description
    End If
    On Error GoTo 0
End Sub

' ===== VIEW GROUP CALLBACKS =====

'Toggle Gridlines - Macabacus compatible
Public Sub ToggleGridlinesCallback(control As IRibbonControl)
    On Error Resume Next
    Debug.Print "ToggleGridlinesCallback triggered"
    ActiveWindow.DisplayGridlines = Not ActiveWindow.DisplayGridlines
    Dim status As String
    status = IIf(ActiveWindow.DisplayGridlines, "shown", "hidden")
    Application.StatusBar = "Gridlines " & status
    Application.OnTime Now + TimeValue("00:00:02"), "ClearStatusBar"
    If Err.Number <> 0 Then
        Debug.Print "Error in ToggleGridlinesCallback: " & Err.Description
    End If
    On Error GoTo 0
End Sub

'Zoom In - Macabacus compatible
Public Sub ZoomInCallback(control As IRibbonControl)
    On Error Resume Next
    Debug.Print "ZoomInCallback triggered"
    If ActiveWindow.Zoom < 400 Then
        ActiveWindow.Zoom = ActiveWindow.Zoom + 10
        Application.StatusBar = "Zoom: " & ActiveWindow.Zoom & "%"
        Application.OnTime Now + TimeValue("00:00:02"), "ClearStatusBar"
    End If
    If Err.Number <> 0 Then
        Debug.Print "Error in ZoomInCallback: " & Err.Description
    End If
    On Error GoTo 0
End Sub

'Zoom Out - Macabacus compatible
Public Sub ZoomOutCallback(control As IRibbonControl)
    On Error Resume Next
    Debug.Print "ZoomOutCallback triggered"
    If ActiveWindow.Zoom > 10 Then
        ActiveWindow.Zoom = ActiveWindow.Zoom - 10
        Application.StatusBar = "Zoom: " & ActiveWindow.Zoom & "%"
        Application.OnTime Now + TimeValue("00:00:02"), "ClearStatusBar"
    End If
    If Err.Number <> 0 Then
        Debug.Print "Error in ZoomOutCallback: " & Err.Description
    End If
    On Error GoTo 0
End Sub

' ===== UTILITIES GROUP CALLBACKS =====

'Quick Save - Macabacus compatible
Public Sub QuickSaveCallback(control As IRibbonControl)
    On Error Resume Next
    Debug.Print "QuickSaveCallback triggered"
    Application.ActiveWorkbook.Save
    Application.StatusBar = "Workbook saved at " & Format(Now, "hh:mm:ss")
    Application.OnTime Now + TimeValue("00:00:03"), "ClearStatusBar"
    If Err.Number <> 0 Then
        Debug.Print "Error in QuickSaveCallback: " & Err.Description
        MsgBox "Error saving workbook: " & Err.Description, vbExclamation, "XLerate"
    End If
    On Error GoTo 0
End Sub

'Settings Manager
Public Sub SettingsCallback(control As IRibbonControl)
    Debug.Print "SettingsCallback triggered"
    ShowSettings
End Sub

'Reset All Formats
Public Sub ResetFormatsCallback(control As IRibbonControl)
    On Error Resume Next
    Debug.Print "ResetFormatsCallback triggered"
    If MsgBox("This will reset all custom formats to defaults. Continue?", _
              vbQuestion + vbYesNo, "Reset Formats") = vbYes Then
        Application.Run "ResetAllFormatsToDefaults"
    End If
    If Err.Number <> 0 Then
        Debug.Print "Error in ResetFormatsCallback: " & Err.Description
    End If
    On Error GoTo 0
End Sub

'About XLerate
Public Sub AboutCallback(control As IRibbonControl)
    Debug.Print "AboutCallback triggered"
    Dim aboutMsg As String
    aboutMsg = "XLerate v2.0.0" & vbNewLine & vbNewLine & _
               "Enhanced Excel productivity add-in with Macabacus-compatible shortcuts" & vbNewLine & vbNewLine & _
               "Key Features:" & vbNewLine & _
               "• Fast Fill Right/Down (Ctrl+Alt+Shift+R/D)" & vbNewLine & _
               "• Pro Precedents/Dependents (Ctrl+Alt+Shift+[/])" & vbNewLine & _
               "• Format Cycling (Ctrl+Alt+Shift+1/2/3/4)" & vbNewLine & _
               "• AutoColor Selection (Ctrl+Alt+Shift+A)" & vbNewLine & _
               "• Error Wrapping (Ctrl+Alt+Shift+E)" & vbNewLine & _
               "• And much more..." & vbNewLine & vbNewLine & _
               "Open source project inspired by Macabacus" & vbNewLine & _
               "Compatible with Windows and macOS"
    
    MsgBox aboutMsg, vbInformation, "About XLerate"
End Sub

' ===== BACKWARD COMPATIBILITY CALLBACKS =====
' These maintain compatibility with the original XLerate ribbon

Public Sub FindAndDisplayPrecedents(control As IRibbonControl)
    ProPrecedentsCallback control
End Sub

Public Sub FindAndDisplayDependents(control As IRibbonControl)
    ProDependentsCallback control
End Sub

Public Sub OnCheckHorizontalConsistency(control As IRibbonControl)
    FormulaConsistencyCallback control
End Sub

Public Sub DoCycleNumberFormat(control As IRibbonControl)
    CycleNumberFormatCallback control
End Sub

Public Sub DoCycleCellFormat(control As IRibbonControl)
    CellFormatCycleCallback control
End Sub

Public Sub DoCycleDateFormat(control As IRibbonControl)
    DateCycleCallback control
End Sub

Public Sub ShowSettingsForm(control As IRibbonControl)
    SettingsCallback control
End Sub

Public Sub DoAutoColorCells(control As IRibbonControl)
    AutoColorCallback control
End Sub

' ===== UTILITY FUNCTIONS =====

Public Sub ClearStatusBar()
    Application.StatusBar = False
End Sub

================================================================================
FILE 5: src/modules/ModVersionInfo.bas (NEW FILE)
================================================================================

' ================================================================
' File: src/modules/ModVersionInfo.bas
' Version: 2.0.0
' Date: January 2025
'
' CHANGELOG:
' v2.0.0 - Created version tracking module
'        - Added comprehensive changelog management
'        - Added version comparison functions
'        - Added upgrade notification system
'        - Added feature discovery helpers
' ================================================================

Attribute VB_Name = "ModVersionInfo"
Option Explicit

' Version Constants
Public Const XLERATE_VERSION As String = "2.0.0"
Public Const XLERATE_BUILD_DATE As String = "January 2025"
Public Const XLERATE_CODENAME As String = "Macabacus Compatible"

' Feature flags for version-specific functionality
Public Const FEATURES_MACABACUS_SHORTCUTS As Boolean = True
Public Const FEATURES_FAST_FILL_DOWN As Boolean = True
Public Const FEATURES_ENHANCED_UI As Boolean = True
Public Const FEATURES_CROSS_PLATFORM As Boolean = True

Public Function GetVersionInfo() As String
    GetVersionInfo = "XLerate v" & XLERATE_VERSION & " (" & XLERATE_CODENAME & ")" & vbNewLine & _
                    "Build Date: " & XLERATE_BUILD_DATE & vbNewLine & _
                    "Compatible with: Excel 365, 2019, 2021 (Windows & macOS)"
End Function

Public Function GetWhatsNew() As String
    Dim whatsNew As String
    whatsNew = "🆕 What's New in XLerate v" & XLERATE_VERSION & vbNewLine & vbNewLine
    
    whatsNew = whatsNew & "🚀 MACABACUS-COMPATIBLE SHORTCUTS:" & vbNewLine
    whatsNew = whatsNew & "• Fast Fill Right: Ctrl+Alt+Shift+R" & vbNewLine
    whatsNew = whatsNew & "• Fast Fill Down: Ctrl+Alt+Shift+D (NEW!)" & vbNewLine
    whatsNew = whatsNew & "• Error Wrap: Ctrl+Alt+Shift+E" & vbNewLine
    whatsNew = whatsNew & "• Pro Precedents: Ctrl+Alt+Shift+[" & vbNewLine
    whatsNew = whatsNew & "• Pro Dependents: Ctrl+Alt+Shift+]" & vbNewLine
    whatsNew = whatsNew & "• Number Cycle: Ctrl+Alt+Shift+1" & vbNewLine
    whatsNew = whatsNew & "• Date Cycle: Ctrl+Alt+Shift+2" & vbNewLine
    whatsNew = whatsNew & "• AutoColor: Ctrl+Alt+Shift+A" & vbNewLine
    whatsNew = whatsNew & "• Quick Save: Ctrl+Alt+Shift+S" & vbNewLine
    whatsNew = whatsNew & "• Toggle Gridlines: Ctrl+Alt+Shift+G" & vbNewLine & vbNewLine
    
    whatsNew = whatsNew & "✨ ENHANCED FEATURES:" & vbNewLine
    whatsNew = whatsNew & "• Smart Fill Down with column pattern detection" & vbNewLine
    whatsNew = whatsNew & "• Redesigned ribbon with Macabacus-inspired layout" & vbNewLine
    whatsNew = whatsNew & "• Cross-platform optimization (Windows & macOS)" & vbNewLine
    whatsNew = whatsNew & "• Enhanced performance for large ranges" & vbNewLine
    whatsNew = whatsNew & "• Improved error handling and user feedback" & vbNewLine
    whatsNew = whatsNew & "• Backward compatibility with all v1.x shortcuts" & vbNewLine & vbNewLine
    
    whatsNew = whatsNew & "🎯 WORKFLOW IMPROVEMENTS:" & vbNewLine
    whatsNew = whatsNew & "• Zoom controls with keyboard shortcuts" & vbNewLine
    whatsNew = whatsNew & "• Enhanced formula consistency checking" & vbNewLine
    whatsNew = whatsNew & "• Settings manager reorganization" & vbNewLine
    whatsNew = whatsNew & "• Status bar feedback for all operations" & vbNewLine
    whatsNew = whatsNew & "• Professional tooltips with shortcut references" & vbNewLine
    
    GetWhatsNew = whatsNew
End Function

Public Sub ShowVersionInfo()
    MsgBox GetVersionInfo(), vbInformation, "XLerate Version Information"
End Sub

Public Sub ShowWhatsNew()
    ' Create a simple form to display what's new
    Dim msg As String
    msg = GetWhatsNew()
    
    ' For now, use MsgBox (could be enhanced with custom form)
    MsgBox msg, vbInformation, "What's New in XLerate v" & XLERATE_VERSION
End Sub

Public Function CheckForUpdates() As Boolean
    ' Placeholder for future update checking functionality
    ' Could connect to GitHub API to check for newer releases
    CheckForUpdates = False
    
    ' Future implementation:
    ' - Compare current version with latest GitHub release
    ' - Notify user if update available
    ' - Provide download link
End Function

Public Sub RecordUsageStatistics(functionName As String)
    ' Optional: Track which functions are used most
    ' Could help prioritize future development
    
    On Error Resume Next
    Dim usageCount As Long
    usageCount = CLng(ThisWorkbook.CustomDocumentProperties("Usage_" & functionName))
    usageCount = usageCount + 1
    
    ' Delete and recreate property
    ThisWorkbook.CustomDocumentProperties("Usage_" & functionName).Delete
    ThisWorkbook.CustomDocumentProperties.Add _
        Name:="Usage_" & functionName, _
        LinkToContent:=False, _
        Type:=msoPropertyTypeNumber, _
        Value:=usageCount
        
    On Error GoTo 0
End Sub

================================================================================
FILE 6: README.md (ROOT DIRECTORY)
================================================================================

# ⚡XLerate v2.0.0
**Enhanced Excel productivity add-in with Macabacus-compatible shortcuts**

XLerate is an open-source Excel add-in for Windows and Mac designed to speed up financial modeling tasks and spot potential errors with ease, featuring advanced auditing and formula consistency tools with Macabacus-compatible keyboard shortcuts.

<img src="/XLerate.png" alt="XLerate Add-in" width="800" height="auto"/>

## 🆕 What's New in v2.0.0

### Macabacus-Compatible Shortcuts
- **Fast Fill Right**: `Ctrl+Alt+Shift+R` (Macabacus standard)
- **Fast Fill Down**: `Ctrl+Alt+Shift+D` (Macabacus standard)  
- **Error Wrap**: `Ctrl+Alt+Shift+E` (Macabacus standard)
- **Pro Precedents**: `Ctrl+Alt+Shift+[` (Macabacus standard)
- **Pro Dependents**: `Ctrl+Alt+Shift+]` (Macabacus standard)
- **General Number Cycle**: `Ctrl+Alt+Shift+1` (Macabacus standard)
- **Date Cycle**: `Ctrl+Alt+Shift+2` (Macabacus standard)
- **AutoColor Selection**: `Ctrl+Alt+Shift+A` (Macabacus standard)
- **Quick Save**: `Ctrl+Alt+Shift+S` (Macabacus standard)
- **Toggle Gridlines**: `Ctrl+Alt+Shift+G` (Macabacus standard)
- **Zoom In/Out**: `Ctrl+Alt+Shift+=/−` (Macabacus standard)

### Enhanced Features
- **Smart Fill Down**: Vertical filling based on column patterns
- **Enhanced UI**: Redesigned ribbon with Macabacus-inspired layout
- **Cross-Platform**: Optimized for both Windows and macOS
- **Backward Compatibility**: All original shortcuts still work
- **Improved Performance**: Faster processing for large ranges

## 🚀 Core Features

### Advanced Formula Tracer
- **Pro Precedents** (`Ctrl+Alt+Shift+[`): Trace all precedents with interactive navigation
- **Pro Dependents** (`Ctrl+Alt+Shift+]`): Trace all dependents with enhanced visualization
- Quick navigation through complex formula chains
- Clear all arrows with `Ctrl+Alt+Shift+Delete`

### Smart Fill Functions
- **Fast Fill Right** (`Ctrl+Alt+Shift+R`): Intelligently fills formulas right based on row patterns
- **Fast Fill Down** (`Ctrl+Alt+Shift+D`): Intelligently fills formulas down based on column patterns
- Automatic boundary detection within 3 rows/columns
- Handles merged cells and complex ranges

### Formula Consistency Checker
- **Formula Consistency** (`Ctrl+Alt+Shift+C`): Visual highlighting of formula pattern breaks
- Green highlighting for consistent formulas
- Red highlighting for inconsistencies
- Toggle on/off to compare before and after

### Enhanced Format Cycling
- **Number Formats** (`Ctrl+Alt+Shift+1`): Cycle through custom number formats
- **Date Formats** (`Ctrl+Alt+Shift+2`): Cycle through custom date formats  
- **Cell Formats** (`Ctrl+Alt+Shift+3`): Cycle through background colors and borders
- **Text Styles** (`Ctrl+Alt+Shift+4`): Cycle through font styles and formatting
- Fully customizable through Settings Manager

### AutoColor System
- **AutoColor Selection** (`Ctrl+Alt+Shift+A`): Automatically color cells by content type
  - **Blue**: Input values and constants
  - **Black**: Standard formulas  
  - **Green**: Worksheet links
  - **Purple**: Workbook links and external references
  - **Orange**: Hyperlinks
  - **Custom colors**: Configurable through settings

### Error Management
- **Error Wrap** (`Ctrl+Alt+Shift+E`): Wrap formulas with IFERROR statements
- **Switch Sign** (`Ctrl+Alt+Shift+~`): Toggle positive/negative values
- Customizable error values (NA(), 0, "", etc.)

### View Controls
- **Toggle Gridlines** (`Ctrl+Alt+Shift+G`): Show/hide worksheet gridlines
- **Zoom In** (`Ctrl+Alt+Shift+=`): Increase zoom by 10%
- **Zoom Out** (`Ctrl+Alt+Shift+-`): Decrease zoom by 10%

### Utility Functions
- **Quick Save** (`Ctrl+Alt+Shift+S`): Save with visual confirmation
- **Settings Manager** (`Ctrl+Alt+Shift+,`): Configure all XLerate options
- **CAGR Function**: Built-in compound annual growth rate calculation
- **Reset Formats** (`Ctrl+Shift+0`): Reset all customizations to defaults

## 💾 Installation

### Windows 🪟
1. Download `XLerate.xlam` from the `dist` folder
2. Place in your Excel add-ins folder: `C:\Users\[Username]\AppData\Roaming\Microsoft\AddIns`
3. Enable in Excel: File → Options → Add-ins → Excel Add-ins → Go → Check "XLerate" → OK

**Note:** You may need to unblock the file:
1. Right-click `XLerate.xlam` → Properties
2. Check "Unblock" under Security → OK

### Mac 🍎
1. Download `XLerate.xlam` from the `dist` folder
2. Place in Excel add-ins folder:
   - **Office 365 (Big Sur+)**: `/Users/<username>/Library/Containers/com.microsoft.Excel/Data/Library/Application Support/Microsoft/Office/Add-ins`
   - **Legacy versions**: `/Users/<username>/Library/Group Containers/UBF8T346G9.Office/User Content/Add-ins`
3. Enable in Excel: Excel → Tools → Excel Add-ins → Browse → Select `XLerate.xlam` → Check "XLerate" → OK

**Note:** If you see a security warning:
1. System Preferences → Security & Privacy
2. Click "Open Anyway" for XLerate.xlam

## 📖 Usage Guide

### Quick Start with Macabacus-Compatible Shortcuts

XLerate v2.0.0 uses the same keyboard shortcuts as Macabacus for seamless transition:

| Function | Macabacus Shortcut | XLerate Shortcut | Description |
|----------|-------------------|------------------|-------------|
| Fast Fill Right | `Ctrl+Alt+Shift+R` | `Ctrl+Alt+Shift+R` | Smart horizontal fill |
| Fast Fill Down | `Ctrl+Alt+Shift+D` | `Ctrl+Alt+Shift+D` | Smart vertical fill |
| Error Wrap | `Ctrl+Alt+Shift+E` | `Ctrl+Alt+Shift+E` | Add IFERROR wrapping |
| Pro Precedents | `Ctrl+Alt+Shift+[` | `Ctrl+Alt+Shift+[` | Advanced precedent trace |
| Pro Dependents | `Ctrl+Alt+Shift+]` | `Ctrl+Alt+Shift+]` | Advanced dependent trace |
| General Number | `Ctrl+Alt+Shift+1` | `Ctrl+Alt+Shift+1` | Cycle number formats |
| Date Cycle | `Ctrl+Alt+Shift+2` | `Ctrl+Alt+Shift+2` | Cycle date formats |
| AutoColor | `Ctrl+Alt+Shift+A` | `Ctrl+Alt+Shift+A` | Auto-color by content |
| Quick Save | `Ctrl+Alt+Shift+S` | `Ctrl+Alt+Shift+S` | Save with confirmation |
| Toggle Gridlines | `Ctrl+Alt+Shift+G` | `Ctrl+Alt+Shift+G` | Show/hide gridlines |

### Modeling Workflows

#### Fast Fill Operations
1. **Right Fill**: Select cell with formula → `Ctrl+Alt+Shift+R`
   - XLerate scans 3 rows above for data patterns
   - Automatically fills to the boundary of data
   
2. **Down Fill**: Select cell with formula → `Ctrl+Alt+Shift+D`  
   - XLerate scans 3 columns left for data patterns
   - Fills down to match the data boundary

#### Error Handling
1. **Wrap with IFERROR**: Select formulas → `Ctrl+Alt+Shift+E`
   - Wraps selected formulas: `=IFERROR(original_formula, NA())`
   - Configurable error values in Settings

2. **Switch Signs**: Select cells → `Ctrl+Alt+Shift+~`
   - Toggles positive/negative for values and formulas
   - Handles both numbers and formula references

### Auditing Workflows

#### Advanced Tracing
1. **Pro Precedents**: Select cell → `Ctrl+Alt+Shift+[`
   - Interactive dialog with all precedents
   - Navigate with arrow keys, `Esc` to close
   - Shows cell addresses, values, and formulas

2. **Pro Dependents**: Select cell → `Ctrl+Alt+Shift+]`
   - Interactive dialog with all dependents
   - Click any item to navigate to that cell
   - Real-time formula preview

#### Formula Consistency
1. **Check Consistency**: Select range → `Ctrl+Alt+Shift+C`
   - Green bars: Formulas consistent with neighbors
   - Red bars: Formulas inconsistent (potential errors)
   - Toggle off: Press `Ctrl+Alt+Shift+C` again

### Formatting Workflows

#### Format Cycling
All format cycles are **fully customizable** through Settings Manager:

1. **Number Formats** (`Ctrl+Alt+Shift+1`):
   - Default: General → Comma 0 → Comma 1 → Comma 2 → (repeat)
   - Add custom formats like thousands, millions, percentages

2. **Date Formats** (`Ctrl+Alt+Shift+2`):
   - Default: yyyy → mmm-yyyy → dd-mmm-yy → (repeat)
   - Add quarterly, weekly, or fiscal year formats

3. **Cell Formats** (`Ctrl+Alt+Shift+3`):
   - Default: Normal → Inputs → Good → Bad → Important → (repeat)
   - Customize colors, borders, and patterns

4. **Text Styles** (`Ctrl+Alt+Shift+4`):
   - Default: Heading → Subheading → Sum → (repeat)
   - Configure fonts, sizes, colors, and borders

#### AutoColor System
**AutoColor Selection** (`Ctrl+Alt+Shift+A`) applies intelligent coloring:

- **Input Detection**: Constants, user-entered values
- **Formula Types**: Simple formulas vs. complex calculations  
- **Link Classification**: 
  - Worksheet links (same workbook)
  - Workbook links (external workbooks)
  - External references (web services, databases)
- **Partial Inputs**: Formulas containing hardcoded numbers

Customize all colors in Settings → Auto-Color.

### Settings and Customization

#### Access Settings Manager
- **Ribbon**: XLerate tab → Utilities → Settings
- **Keyboard**: `Ctrl+Alt+Shift+,`

#### Configuration Options
1. **Numbers**: Add/edit/remove number format cycles
2. **Dates**: Customize date format patterns  
3. **Cells**: Configure background colors and border styles
4. **Text Styles**: Set up font combinations with borders
5. **Auto-Color**: Customize colors for each content type
6. **Error**: Set default error values for wrapping

#### Reset to Defaults
- **All Formats**: `Ctrl+Shift+0` - Resets everything to defaults
- **Individual**: Use Settings Manager to reset specific categories

## 🔧 Advanced Features

### CAGR Function
Built-in compound annual growth rate calculation:
```excel
=CAGR(A1:A5)  ' Calculates CAGR using first/last values and count
```

### Backward Compatibility
Original XLerate shortcuts still work:
- `Ctrl+Shift+1`: Number format cycle
- `Ctrl+Shift+2`: Cell format cycle  
- `Ctrl+Shift+3`: Date format cycle
- `Ctrl+Shift+R`: Smart Fill Right (original)

### Cross-Platform Notes
**Windows vs. macOS**:
- All shortcuts work identically on both platforms
- File paths differ for installation
- Performance optimized for both Office versions

**Office Versions**:
- Supports Office 365, Office 2019, Office 2021
- Compatible with both 32-bit and 64-bit installations
- Ribbon adapts to Office UI themes

## 💡 Tips and Best Practices

### Maximizing Productivity
1. **Learn the "Big 5" shortcuts**:
   - `Ctrl+Alt+Shift+R/D`: Fast Fill  
   - `Ctrl+Alt+Shift+[/]`: Pro Tracing
   - `Ctrl+Alt+Shift+1`: Number cycling

2. **Customize format cycles** for your workflow:
   - Add organization-specific number formats
   - Set up consistent cell coloring schemes
   - Configure date formats for reporting periods

3. **Use AutoColor systematically**:
   - Color inputs first with `Ctrl+Alt+Shift+A`
   - Review red-colored partial inputs for hardcoded values
   - Check green worksheet links for broken references

### Troubleshooting
- **Shortcuts not working**: Check if another add-in conflicts
- **Performance issues**: Reduce range sizes for large worksheets  
- **Format cycles stopped**: Reset with `Ctrl+Shift+0`
- **Settings not saving**: Ensure macro permissions are enabled

## 🛠️ Development and Contributing

### For Developers
XLerate is built with:
- **VBA**: Core functionality and ribbon interface
- **XML**: Custom ribbon definition (customUI14.xml)
- **Class Modules**: Object-oriented formatting and settings
- **Module Architecture**: Separated concerns for maintainability

### Contributing Guidelines
1. **Fork** the repository
2. **Create feature branch**: `git checkout -b feature/macabacus-shortcuts`
3. **Follow naming conventions**: Use descriptive function names
4. **Add version info**: Update changelog in file headers
5. **Test thoroughly**: Verify on both Windows and macOS
6. **Submit pull request**: Include description of changes

### Project Structure
```
src/
├── modules/           # Core functionality modules
├── forms/            # Settings UI forms  
├── class modules/    # Data type definitions
├── ribbon/           # Ribbon XML definition
└── objects/          # Workbook and worksheet events
```

## 📊 Comparison with Macabacus

| Feature | Macabacus | XLerate v2.0.0 | Notes |
|---------|-----------|----------------|-------|
| Fast Fill Right | ✅ `Ctrl+Alt+Shift+R` | ✅ `Ctrl+Alt+Shift+R` | Same shortcut |
| Fast Fill Down | ✅ `Ctrl+Alt+Shift+D` | ✅ `Ctrl+Alt+Shift+D` | Same shortcut |
| Error Wrap | ✅ `Ctrl+Alt+Shift+E` | ✅ `Ctrl+Alt+Shift+E` | Same shortcut |
| Pro Precedents | ✅ `Ctrl+Alt+Shift+[` | ✅ `Ctrl+Alt+Shift+[` | Same shortcut |
| Pro Dependents | ✅ `Ctrl+Alt+Shift+]` | ✅ `Ctrl+Alt+Shift+]` | Same shortcut |
| Number Cycle | ✅ `Ctrl+Alt+Shift+1` | ✅ `Ctrl+Alt+Shift+1` | Same shortcut |
| Date Cycle | ✅ `Ctrl+Alt+Shift+2` | ✅ `Ctrl+Alt+Shift+2` | Same shortcut |
| AutoColor | ✅ `Ctrl+Alt+Shift+A` | ✅ `Ctrl+Alt+Shift+A` | Same shortcut |
| Quick Save | ✅ `Ctrl+Alt+Shift+S` | ✅ `Ctrl+Alt+Shift+S` | Same shortcut |
| Toggle Gridlines | ✅ `Ctrl+Alt+Shift+G` | ✅ `Ctrl+Alt+Shift+G` | Same shortcut |
| Open Source | ❌ | ✅ | MIT License |
| Cost | 💰 Paid | 🆓 Free | Always free |
| Customization | Limited | ✅ Full | Complete control |

## 📄 License

This project is licensed under the **MIT License** - see the [LICENSE](LICENSE) file for details.

## 💪 Support

- **Report bugs**: [GitHub Issues](https://github.com/omegarhovega/XLerate/issues)
- **Request features**: [Feature Request](https://github.com/omegarhovega/XLerate/issues/new?template=feature_request.md)
- **Discussions**: [GitHub Discussions](https://github.com/omegarhovega/XLerate/discussions)
- **Documentation**: [Wiki](https://github.com/omegarhovega/XLerate/wiki)

## 🙏 Acknowledgments

- **Inspired by Macabacus**: XLerate adopts the same keyboard shortcuts for seamless transition
- **Built by financial analysts**: For financial analysts who need speed and accuracy
- **Community driven**: Open source project welcoming contributions
- **Cross-platform**: Equal support for Windows and macOS users

---

**XLerate v2.0.0** - Making Excel faster, one shortcut at a time ⚡

================================================================================
END OF PACKAGE
================================================================================

INSTALLATION CHECKLIST:
□ 1. Backup current src/ directory
□ 2. Copy ThisWorkbook.cls to src/objects/
□ 3. Copy ModSmartFillRight.bas to src/modules/ (overwrite existing)
□ 4. Copy customUI14.xml to src/ribbon/ (overwrite existing)
□ 5. Copy RibbonCallbacks.bas to src/modules/ (overwrite existing)
□ 6. Add ModVersionInfo.bas to src/modules/ (new file)
□ 7. Copy README.md to root directory (overwrite existing)
□ 8. Test installation by opening Excel and checking shortcuts
□ 9. Verify ribbon displays correctly with new layout
□ 10. Test Macabacus-compatible shortcuts (Ctrl+Alt+Shift+...)

QUICK TEST SEQUENCE:
1. Open Excel with XLerate
2. Create a simple formula in cell A1: =1+1
3. Test Fast Fill Right: Ctrl+Alt+Shift+R
4. Test Fast Fill Down: Ctrl+Alt+Shift+D
5. Test Number Format Cycle: Ctrl+Alt+Shift+1
6. Test AutoColor: Ctrl+Alt+Shift+A
7. Check ribbon has new Modeling, Auditing, Formatting, View, Utilities groups

NOTES:
- All files include version 2.0.0 headers with detailed changelogs
- Backward compatibility maintained for all v1.x shortcuts
- Cross-platform support for Windows and macOS
- Enhanced error handling and user feedback
- Professional ribbon layout matching Macabacus structure